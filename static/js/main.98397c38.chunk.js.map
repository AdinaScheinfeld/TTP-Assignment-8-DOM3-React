{"version":3,"sources":["components/Table.jsx","components/TableRow.jsx","components/TableCell.jsx","App.js","reportWebVitals.js","index.js"],"names":["Table","state","numRows","numCols","color","addRow","setState","addColumn","removeRow","alert","removeColumn","selectColor","e","target","value","changeColor","style","backgroundColor","totalRows","i","this","push","numColumns","className","onClick","for","name","id","onChange","Component","TableRow","props","totalCols","TableCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAsFeA,G,kNA/EXC,MAAQ,CACJC,QAAS,EACTC,QAAS,EACTC,MAAO,S,EAIXC,OAAS,WACL,EAAKC,SAAS,CAAEJ,QAAS,EAAKD,MAAMC,QAAQ,K,EAIhDK,UAAY,WACR,EAAKD,SAAS,CAAEH,QAAS,EAAKF,MAAME,QAAQ,K,EAIhDK,UAAY,WACL,EAAKP,MAAMC,QAAU,EACpB,EAAKI,SAAS,CAAEJ,QAAS,EAAKD,MAAMC,QAAQ,IAG5CO,MAAM,+B,EAKdC,aAAe,WACR,EAAKT,MAAME,QAAS,EACnB,EAAKG,SAAS,CAAEH,QAAS,EAAKF,MAAME,QAAQ,IAG5CM,MAAM,kC,EAKdE,YAAc,SAACC,GACX,EAAKN,SAAS,CAAEF,MAAOQ,EAAEC,OAAOC,S,EAIpCC,YAAc,SAACH,GACXA,EAAEC,OAAOG,MAAMC,gBAAkB,EAAKhB,MAAMG,O,uDAO5C,IADA,IAAIc,EAAY,GACRC,EAAE,EAAGA,EAAEC,KAAKnB,MAAMC,QAASiB,IAC/BD,EAAUG,KAAK,cAAC,EAAD,CAAUC,WAAaF,KAAKnB,MAAME,QAAUY,YAAaK,KAAKL,eAGjF,OACI,sBAAKQ,UAAU,YAAf,UACI,sBAAKA,UAAU,UAAf,UACI,wBAAQC,QAAUJ,KAAKf,OAAvB,qBACA,wBAAQmB,QAAUJ,KAAKb,UAAvB,wBACA,wBAAQiB,QAAUJ,KAAKZ,UAAvB,wBACA,wBAAQgB,QAAUJ,KAAKV,aAAvB,8BAGJ,iCACI,uBAAOe,IAAI,SAAX,8BACA,yBAAQC,KAAK,SAASC,GAAG,SAASC,SAAWR,KAAKT,YAAlD,UACI,wBAAQG,MAAM,QAAQa,GAAG,QAAzB,mBACA,wBAAQb,MAAM,MAAMa,GAAG,MAAvB,iBACA,wBAAQb,MAAM,SAASa,GAAG,SAA1B,oBACA,wBAAQb,MAAM,OAAOa,GAAG,OAAxB,wBAIR,uBAAOJ,UAAU,iBAAjB,SAAoCL,W,GA5EhCW,cCWLC,EAZE,SAACC,GAGd,IADA,IAAIC,EAAY,GACRb,EAAE,EAAGA,EAAEY,EAAMT,WAAYH,IAC7Ba,EAAUX,KAAK,cAAC,EAAD,CAAWN,YAAcgB,EAAMhB,eAGlD,OACI,6BAAMiB,KCFCC,G,MANG,SAACF,GACf,OACI,oBAAIP,QAASO,EAAMhB,YAAnB,iBCSOmB,MAXf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,+CACA,yGACA,2HACA,cAAC,EAAD,QCGSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98397c38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TableRow } from './index';\nimport './Table.css';\n\nclass Table extends Component {\n    \n    // state\n    state = { \n        numRows: 1,\n        numCols: 1,\n        color: 'white'\n     }\n\n    // method to add a row to the table\n    addRow = () => {\n        this.setState({ numRows: this.state.numRows+1 });\n    }\n\n    // method to add a column to the table\n    addColumn = () => {\n        this.setState({ numCols: this.state.numCols+1 });\n    }\n\n    // method to remove a row from the table\n    removeRow = () => {\n        if(this.state.numRows > 1) {\n            this.setState({ numRows: this.state.numRows-1 });\n        }\n        else {\n            alert('Unable to remove first row');\n        }\n    }\n\n    // method to remove a column from the table\n    removeColumn = () => {\n        if(this.state.numCols >1 ) {\n            this.setState({ numCols: this.state.numCols-1 });\n        }\n        else {\n            alert('Unable to remove first column');\n        }\n    }\n\n    // method to update the state with the color selected from the menue\n    selectColor = (e) => {\n        this.setState({ color: e.target.value });\n    }\n\n    // method to change a cell's color when the cell is clicked\n    changeColor = (e) => {\n        e.target.style.backgroundColor = this.state.color;\n    }\n\n    // render\n    render() { \n\n        let totalRows = [];\n        for(let i=0; i<this.state.numRows; i++){\n            totalRows.push(<TableRow numColumns={ this.state.numCols } changeColor={this.changeColor} />);\n        }\n\n        return ( \n            <div className='container'>\n                <div className='buttons'>\n                    <button onClick={ this.addRow }>Add Row</button>\n                    <button onClick={ this.addColumn }>Add Column</button>\n                    <button onClick={ this.removeRow }>Remove Row</button>\n                    <button onClick={ this.removeColumn }>Remove Column</button>\n                </div>\n\n                <form>\n                    <label for='colors'>Select a color: </label>\n                    <select name='colors' id='colors' onChange={ this.selectColor }>\n                        <option value='white' id='white'>white</option>\n                        <option value='red' id='red'>red</option>\n                        <option value='yellow' id='yellow'>yellow</option>\n                        <option value='blue' id='blue'>blue</option>\n                    </select>\n                </form>\n\n                <table className='tableContainer'>{ totalRows }</table>\n            </div>\n         );\n    }\n}\n \nexport default Table;","import React from 'react';\nimport { TableCell } from './index';\n\nconst TableRow = (props) => {\n\n    let totalCols = [];\n    for(let i=0; i<props.numColumns; i++){\n        totalCols.push(<TableCell changeColor={ props.changeColor } />);\n    }\n    \n    return ( \n        <tr>{ totalCols }</tr>\n    );\n}\n \nexport default TableRow;","import React from 'react';\nimport './TableCell.css';\n\nconst TableCell = (props) => {\n    return ( \n        <td onClick={props.changeColor}> </td>\n     );\n}\n \nexport default TableCell;\n\n","import './App.css';\nimport { Table } from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Grid Coloring</h1>\n      <h4>Use the buttons below to add and remove rows and columns from the grid.</h4>\n      <h4>You can also select a color and change the color of a specific cell by clicking the cell.</h4>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}